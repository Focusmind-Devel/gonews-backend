# Generated by Django 3.0.7 on 2020-08-12 04:01

import ckeditor_uploader.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Colaborator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True, verbose_name='Nombre de la Categoría')),
                ('slug', models.SlugField(default=None, max_length=100, null=True)),
                ('target', models.CharField(choices=[('M', 'Menú principal'), ('S', 'Menú secundario')], default='S', max_length=1, verbose_name='Menu')),
                ('visible', models.BooleanField(default=True, verbose_name='Visible')),
            ],
            options={
                'verbose_name': 'Categoria',
                'verbose_name_plural': 'Categorias',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='tags disponibles')),
            ],
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, unique=True, verbose_name='Titulo')),
                ('slug', models.SlugField(default=None, max_length=130, null=True)),
                ('resume', models.CharField(default='', max_length=250, verbose_name='Subtitulo')),
                ('header_image', models.ImageField(upload_to='notes/headers', verbose_name='Imagen destacada')),
                ('thumb_image', models.ImageField(upload_to='notes/headers/thumbs', verbose_name='Thumbnail')),
                ('body', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Contenido')),
                ('publish_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de creación')),
                ('show_signed', models.BooleanField(default=False, verbose_name='Firma visible')),
                ('top', models.BooleanField(default=False, verbose_name='Nota destacada en su categoría')),
                ('enable_comments', models.BooleanField(default=True, verbose_name='Comentarios')),
                ('last_notes', models.BooleanField(default=False, verbose_name='Incluir en ultimas noticias')),
                ('main_note', models.BooleanField(default=False, verbose_name='Nota Principal')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Categories', verbose_name='Categoría')),
                ('colaborator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('related_notes', models.ManyToManyField(blank=True, null=True, related_name='_note_related_notes_+', to='api.Note', verbose_name='Notas relacionadas')),
                ('tags', models.ManyToManyField(help_text='seleccione o cree un nuevo tag', to='api.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Nota',
                'verbose_name_plural': 'Notas',
            },
        ),
        migrations.AddField(
            model_name='categories',
            name='top_note',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.Note', verbose_name='Nota destacada'),
        ),
        migrations.CreateModel(
            name='Banners',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('popup_image', models.ImageField(blank=True, null=True, upload_to='banners', verbose_name='imagen')),
                ('popup_link', models.URLField(blank=True, null=True, verbose_name='link')),
                ('leaderboard_image', models.ImageField(blank=True, null=True, upload_to='banners', verbose_name='imagen')),
                ('leaderboard_link', models.URLField(blank=True, null=True, verbose_name='link')),
                ('skyscraper_image', models.ImageField(blank=True, null=True, upload_to='banners', verbose_name='imagen')),
                ('skyscraper_link', models.URLField(blank=True, null=True, verbose_name='link')),
                ('footbuttom_image', models.ImageField(blank=True, null=True, upload_to='banners', verbose_name='imagen')),
                ('footbuttom_link', models.URLField(blank=True, null=True, verbose_name='link')),
                ('visible', models.BooleanField(default=True, verbose_name='visible')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Categories', verbose_name='Categoria')),
            ],
            options={
                'verbose_name': 'Anuncios',
                'verbose_name_plural': 'Anuncios',
            },
        ),
    ]
